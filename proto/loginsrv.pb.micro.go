// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/loginsrv.proto

package loginsrv

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Loginsrv service

func NewLoginsrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Loginsrv service

type LoginsrvService interface {
	CheckRegister(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	QrCode(ctx context.Context, in *QrCodeRequest, opts ...client.CallOption) (*QrCodeResponse, error)
}

type loginsrvService struct {
	c    client.Client
	name string
}

func NewLoginsrvService(name string, c client.Client) LoginsrvService {
	return &loginsrvService{
		c:    c,
		name: name,
	}
}

func (c *loginsrvService) CheckRegister(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "Loginsrv.CheckRegister", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginsrvService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "Loginsrv.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginsrvService) QrCode(ctx context.Context, in *QrCodeRequest, opts ...client.CallOption) (*QrCodeResponse, error) {
	req := c.c.NewRequest(c.name, "Loginsrv.QrCode", in)
	out := new(QrCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Loginsrv service

type LoginsrvHandler interface {
	CheckRegister(context.Context, *CheckRequest, *CheckResponse) error
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	QrCode(context.Context, *QrCodeRequest, *QrCodeResponse) error
}

func RegisterLoginsrvHandler(s server.Server, hdlr LoginsrvHandler, opts ...server.HandlerOption) error {
	type loginsrv interface {
		CheckRegister(ctx context.Context, in *CheckRequest, out *CheckResponse) error
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		QrCode(ctx context.Context, in *QrCodeRequest, out *QrCodeResponse) error
	}
	type Loginsrv struct {
		loginsrv
	}
	h := &loginsrvHandler{hdlr}
	return s.Handle(s.NewHandler(&Loginsrv{h}, opts...))
}

type loginsrvHandler struct {
	LoginsrvHandler
}

func (h *loginsrvHandler) CheckRegister(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.LoginsrvHandler.CheckRegister(ctx, in, out)
}

func (h *loginsrvHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.LoginsrvHandler.Register(ctx, in, out)
}

func (h *loginsrvHandler) QrCode(ctx context.Context, in *QrCodeRequest, out *QrCodeResponse) error {
	return h.LoginsrvHandler.QrCode(ctx, in, out)
}
